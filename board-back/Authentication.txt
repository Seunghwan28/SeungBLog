Basic Authentication
- 사용자 이름 / 비밀번호를 base64로 인코딩하여 Authorization 헤더에 포함하여 전송됨
- 매우 안전하지 않음, SSL/TLS와 함께 사용됨

Authorization: Basic ~~~~

Bearer Token Authentication (이거 사용 예정)
- 헤더에 토큰을 포함하여 전송 Authorization 헤더에 포함하여 전송
- JWT을 사용하여 인증
- (장점)간단한 방식, 상태를 유지하지 않음, 확장성이 높다
- (단점) 토큰 노출 위험, 토큰 관리 힘듦

Authorization: Bearer ~~~~

OAuth 방식
- 토큰 기반인증 방식, 사용자가 직접 자격을 증명 X -> 미리 인증 받아서 토큰을 발급받고 
- 이 토큰을 이용해서 APT를 요청하는 방식 OAuth 2.0을 사용

Kakao / Naver / Git / Facebook (OAuth방식을 사용하는 것들)

API Key / Session based Authentication (다른 인증 방식들)

JWT(Json Web Token): 클레임이라고 불리는 정보를 JSON형태로 안전하게 전송하기 위한 토큰 기반의 표준
- 인증과 정보 교환에 사용, 서명이 되어 있어서 신뢰성 확보가 가능

1. Header: 토큰의 타입과 사용된 알고리즘 정보를 담고 있음, Base64URL로 인코딩
2. Payload: 클레임 정보, 대상, 발행자, 만료 시간 등 다양한 정보가 포함됩, Base64URL로 인코딩
3. Signature: Header와 Payload, Secret Key를 사용하여 생성된 서명

인증, 정보교환

장점
- 상태 유지X(stateless): 서버가 상태를 유지할 필요가 없다
- 간단하고 자기 포함적
- 확장성이 높다

단점
- 크기: 클레임이 많을수록 토큰의 크기가 커짐
- 보안: 서명은 되어있지만 암호화는 되어있지 않다. (단순 인코딩만), 중요한 정보를 JWT에 포함하면 안됨
- 토큰관리: 만료시간, 갱신

MVC에서도 클라이언트에서 요청을 보내면 바로 controller로 가는 것이 아닐, filter 여러개 거쳐서 내려감
filter인증이 안되면, 바로 내보내짐 => 통과한 애들만 controller 작업
filter에서 jwt검증 => subject email 꺼내오기 근데 filter에서 넘기는건 안돼서
외부 context에 담아놓고, 어디서든 꺼내게 하게끔 설게 => filter거치면, context에서 email을 controller로 보내기

provider에서 jwtprovider를 만들어주고 여기서 jwt인증 토큰을 만듦
JwtAuthenticationFilter에서 필터체인과 res req를 활용해서 인증 거치고 다음 필터로 보내기
parseBearerToken(HttpServletRequest request) 을 통해서 req에 대한 토큰을 뽑아와서 올바른지 우선 검증
hasText를 통해 null인지 공백인지 등등 검증하고, bearer 토큰인지 검증 다 하면 token 반환
그 반환된 토큰이 null이면 필터체인으로 바로 내보내기 (controller 안 거치고)
그리고 email값 꺼내오고 (claims의 바디값) => filter에서 외부 context에 저장하는 과정 
authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request)); 를 통해서
요청에 대한 세부 정보 작성가능케하고

비어있는 context만들고, 거기에 이메일 넣고, 그거를 다시 holder에 넣어서 외부에서도 접근가능케함.
오류 뜨면 필터체인으로 그냥 내보내기

.cors() //코스 정책 설정하는 이유에 대해서 공부하기
           .csrf().disable()
           .httpBasic().disable()

antMatchers()가 찾아보니, requestMatchers()로 바뀜. 
JwtProvider cannot be resolved to a typeJava(16777218) 이 에러가 계속 떠서 어캐 해결하나 했는데, 지우고 다시 쓰니까 해결됨 ? ? 왠진모름
requestMatchers는 해당 요청에 대해서 매칭되는 구문이 잇는거들에 대한 처리, http매소드로 분류하는 것도 가능, null처리해도됨
=> restAPI 명세서보고 헤더에 인증이 필요한 것들은 냅두고, 인증이 필요없는 것들에 대해서는 permitAll()

**는 전체, *는 하나만 오는 특정 형태만

.exceptionHandling().authenticationEntryPoint(new FailedAuthenticatonEntryPoint());
=> 위에 내용들이 아마 인증과 관련된 것들, 특히 requestMatchers를 통해 권한 허용들, 여기서 exception터지만, NP오류이므로, 
아래에 FailedAuthenticatonEntryPoint에 NP코드랑 json형태의 response 반환
contentType 정하고, status 정하고, writer로 응답 적어주기

원래는 JwtProvider에 secret key를 하드코딩으로 넣어놨는데 보안에 취약하니, 
resources에 application properties에 넣어놓고
@Value("${secret-key}")
    private String secretKey; @Value 어노테이션을 통해서 전달받는 형식으로 만들기 가능

17분 23초까지
해결해야할 것
1. JwtAuthenticationFilter.java파일에 JwtProvider 빈 등록 문제 해결하기, 롬복 문제일지도..?
2. WebSecurityConfig.java파일에 인증 부분공부하고 .antMatchers()가 안되는 이유 해결하기
3. exception.printStackTrace(); exception왜 다 이걸로 출력시키는지


200
- 성공 : "SU" / "Success."

400
- 유효성 검증 실패 : "VF" / "Validation failed."
- 중복된 이메일 : "DE" / "Duplicate email."
- 중복된 전화번호 : "DT" / "Duplicate tel number."
- 중복된 닉네임 : "DN" / "Duplicate nickname."
- 존재하지 않는 유저 : "NU" / "This user does not exist."
- 존재하지 않는 게시물 : "NB" / "This board does not exist."

401
- 로그인 실패 : "SF" / "Login information mismatch."
- 인증 실패 : "AF" / "Authorization failed."

403
- 권한 없음 : "NP" / "Do not have permission."

500
- 데이터베이스 에러 : "DBE" / "Database error."
1.7 (10번째 강의)
- common폴더에 위 http status코드와 메세지 반환하는 인터페이스를 구현
- dto 폴더에 res와 req를 만들어서 res에 전체 다 쓰이는 DBE 코드 작성하고 나머지 에러는 이거 상속해서 쓴다함
- 프론트로 가서 apis에 res req만들고 res에 파일 작성, types에서 enum형태로 작성 => 코드가 어떤 기능인지 공부필요.
그리고 tsconfig.json 파일이 없어서 만들어주고, baseUrl 을 통해서 절대 경로로 올 수 있게금 허용해줌,

1.8
- 프론트와 백간의 http코드와 메세지 응답하는 거 구현함
- 프론트에 import와 export가 있는데, import는 갖고오는거, tsconfig.json로 절대경로 허용해주고, export default는 외부에서 참조가능하게끔함
- index.ts가 왜필요하냐? 라는 의문을 가졌는데, 약간 인터페이스느낌으로 모듈 사용의 편리성, 내보내기의 중앙 집중화, 다수요소 한곳에서 내보내기 
등의 이유가 있고, 그리고 일종의 진입점(entry point) 역할을 한다.

1.13~1.14
프론트 건들기 시작
게시글 만들기 시작함, boardItem으로 피그마에서 패딩이나, 그런거 박스 만들어서 구현
각 필요한 인터페이스 구현, 게시글, 좋아요, 댓글에 필요한 것들 그리고 모두 export하게 index만들고
mocks에서 최근 게시글 저장해놓고 App.tsx에서 그거 map해서 실행 //이거 문법 공부필요
그리고 default profile image 왜 import 안돼서 const로 일단했는데, 왜 안되는지 공부필요
컴포넌트, 함수, 렌더링, 이벤트 핸들러 모두 나눠서 코드 작성
네비게이터 함수 아직 주석처리해놓음
그리고 원래는 <div>값</div> 직접넣었는데, 인터페이스에서 properties 구현하고 그 props 값을 넣어줌
string은 그냥 {} 안에 넣고, 값은 ${} 을 통해서 값 전달받음 약간 json형태로
map 함수 이해하기
탑3게시글, 일반 게시글 구현 (api x mock으로  )

1.17
input box 프론트 구현, 얘는 좀 많이 어려움
인터페이스 props에서도 받아올 때, 변수형태도 선언해줌 그리고 이벤트 처리도 하고 함수형태도
keyboardEvent랑 Dispatch 알아보기
이벤트 핸들러 함수들
ref와 input box에 받아오는게 되게 많음 있냐없냐에 따라서 변경되는거도
=> 오늘은 app.tsx에서 하드코딩으로 받아오는 값 다 넣어놓고 넘어오는지 확인 잘 넘어옴.
그리고 onKeyDown이 null일 때도 일단 return 시켜서 아무것도 없을 때도 작동시키게끔 설정
그리고 app.tsx에서 useState에 대해서도 알아보자.
이전 다른 index.tsx파일들은 rfc로 했는데, 왜 forwardRef쓰는지 알아볼 필요가 있다잉~

1.23 
메인에 index.tsx에 <BrowserRouter>로 App을 감싸준다.
<Route path='/board'>
        <Route path='detail/:boardNumber' element={<Main/>} /> 
      </Route>
      이렇게 더 상세로 들어갈 때는 크게 하나 묶고 안에는 /로 시작 안하고 그냥 들어가기
경로지정해주고, 레이아웃에 컨테이너, 만들어줌.
<Header />
<Outlet />
<Footer />
이렇게 해서 화면에 해더 아웃렛 푸터 띄워주게 함. 아웃렛에 대해서 공부하자. 
const {pathname} = useLocation();  useLocation도 공부하자. 이거는 리액트 돔 라이브러리꺼
아마 pathname 경로이름 뜨게 해주는건데 {pathname} 띄우면 다 뜨더라고~~

1.25
헤더만들기, 우선 왼쪽 아이콘 홈버튼 네비게이트 함수로 
const onLogoClickHandler = () => {
  navigate(MAIN_PATH());
} => 클릭시 메인화면으로 path 정해주기
오른쪽 부분이 화면마다 좀 다름. 
검색 아이콘을 누르면 status가 true로 바뀌고, 검색어 입력칸이 나오게됨. 
useState와 이벤트 핸들러로, status false면 (기본 상태) true로 만들어줌 => (검색어 입력창 나오게끔)
검색어 input칸에는 keyDown으로 엔터치면 넘어가게끔
onSearchWordChangeHandler로 입력하고 나서 검색화면 갔을 때, 그 검색어가 남아있도록하는것
path variable에 대해서 알아봐야함 특히, useEffect랑 useParams(이게 리액트 돔 훅함수)

1.26
로그인 버튼 랜더링으로 시작
로그인 버튼이랑 마이페이지 (로그인 됐을 때) 버튼인데, 로그인 됐는지 확인하기위해 쿠키 사용
-> npm i react-cookie 로 받아옴
로그인버튼은 AUTH_PATH로 마이페이지는 USER_PATH('') 여기에 유저 정보로 넘어가짐
zustand 받았는데 어떤건지 알아보기

로그인 상태를 위한 변수 isLogin
인터페이스에 User 인터페이스 만들어줌 => 이메일, 프사, 별명 갖고올 수 있게 해놓고, export
store에 login-user.store만들고 User import해줌
여기도 인터페이스로 로그인 상태에 대한 것 설정
로그인 되면, 로그인된 유저 정보로 담아서 로그인된상태(setLoginUser)
로그아웃 되면, 그 유저를 로그아웃 시켜주기 (로그인 상태 null로 만들어주기) => resetLoginUser

로그인돼있고, 유저의 이메일과 내 이메일이 같으면(마이페이지) => 로그아웃 버튼 (마이페이지에서 로그아웃 가능하게)

1.27 
게시물 수정하면 업로드버튼 (제목이랑, 내용있어야 활성화되게) => 컴포넌트가 다르기에 외부에서 state 상속 상속해도되는데
global로 zustand활용해서 하면 더 좋음
업로드 버튼 활성화 비활성화를 보기 위해서 global로 선언한 인터페이스 만들고, props갖고와서
if문으로 둘다 있으면 활성화버튼 해줌. 커서 not-allowed

그러고 서치 버튼, 로그인 버튼 등이 페이지 경로마다 다르니까, 경로들이 맞는지에 대한 변수
isMainPage = pathname.startsWith(MAIN_PATH());
이런식으로 boolean형태의 변수 만들어줌.

백엔드로 회원가입기능 구현할거임. 
DTO에서 회원가입에 필요한것들 개터세터, 필수인것은 NotBlank로
그리고 각 요소에 대한 어노테이션 확인하기
notblank notempty는 문자열에서만 쓸 수 있고, notnull은 참조형 변수에 대해서 다 쓸 수있음
@AssertTrue => true가 아니면 받을 수 없게 (개인정보 동의서)

성공에 대한 메세지를 작성 (response에도 signupDto새로 만들고)
기존에 리스폰스 디티오 확장해서 사용
Validation fail이랑 db error는 알아서 내보내줄거여서,
다른 오류 메세지에 대해서만 작성한다.

-> 백에서 res, req dto 작성, 프론트에서 res req dto 작성
공부할거 : 백에서 res dto 구조, dto자체에 대한 필요성에 대한 공부

SearchButtonRef => 위에 엔터키 말고도 검색 버튼 직접 누르면 넘어가게끔 해놓는거임.

1.28
repository entity 구현
유저 entity먼저만들기 - primary key가 email이니까 @Id 어노테이션 붙여주기
entity에대한 repository만들어줘야하니, 인터페이스로 구현하고, JpaRepository 확장. 제너릭을어떤 엔터티, 
그리고 그 pk의 변수형태로 두개를 받아준다.

board 테이블에 대한 entity를 만들어주는데, 보드 넘버가 pk인데, 얘는  auto Increment가 되어야하니,
@GeneratedValue(strategy = GenerationType.IDENTITY) 이 어노테이션을 통해 구현.

favorite같은경우에는 PK가 두개임 즉 복합키, 그러면 확장자 넘겨줄 때, 어떻게 하냐?
entity에 primaryKey폴더 만들고, FavoritePk.java파일 만들고 거기에 두개다 지정해줌.
=> implements Serializable에 대해서 공부하기.
@Column을 통해서 pk지정. 그러고 그 자바 클래스를 확장자에 넣어줌. 그러면 복합키 넘겨주기 가능함.
그러고 entity에 @IdClass(FavoritePk.class) 이거 추가해줘야함.

* image 테이블에 PK가 없어서 추가해줌. DDL에 추가.
ALTER TABLE `image` ADD COLUMN `sequence` INT PRIMARY KEY AUTO_INCREMENT COMMENT '이미지 번호';

@Table(name="") 이거하는 이유가 클래스 이름을 해줬으면 바로 찾아가는데, SearchLogEntity 이런식으러
entity를 붙여서 못 찾아가서 table어노테이션을 붙여주는거임.

1.30
service에 회원가입 API 인터페이스 작성하고 impl에 구현체 작성 //인터페이스 구조 공부해야함
그리고 DB에 접근해야하니, repository 생성자를 만들어줘야하는데
@Autowired
    private final UserRepository userRepository;

    @Autowired
    public AuthServiceImplement(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Autowired
    public void setUserRepository(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    이렇게 3가지 방식, 필드, 생성자, setter매소드
스프링에서 권장하는 것은 생성자 주입,, 필드하고 새터는 비어있는 상태가 발생하는데, 그 상태를 만들지 않는 경우가
생성자를 통한 방법임.

롬복을 활용해서 final로 지정하면 매번 생성자 안 만들어도, 자동으로 생성자 만들어줌. => 알아서 의존성 주입됨.

회원가입에 대해서 여러가지 요소 중 이메일, 전번, 닉네임  중복이 되면 안되니
유저 리포지토리에서 이렇게 existsBy 쿼리를 사용하면, 존재하면 true반환하는 것
boolean existsByEmail(String email);
boolean existsByNickname(String nickname);
boolean existsByTelNumber(String telNumber);

이러고 api에서 존재하면 true면 signupresoponseDto.duplicate 이런식으로 만들어논거 반환

비밀번호 받아오는데 저장할 때 암호화 jpa security활용 인코더
private PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
이렇게 인코더를 선언해줌. 그러고 String encodedPassword = passwordEncoder.encode(password);
새로운 변수에다가 encode 함수를 활용해서 넣어줌.
=> UserEntity userEntity = new UserEntity(dto); 이렇게!
근데 생성자가 없기에, 오류가 떠서 유저엔티티 가서 생성자 만들어줌. (dto를 매개변수로 받고 get해줌)

엔터티는 DB 테이블의 하나의 레코드이므로, 
userRepository.save(userEntity);
이렇게 리포지토리를 활영해서 엔터티 하나 바로 세이브 가능

controller만들고, requestbody를 매개변수로 받아와서, authService의 signUp을 거펴서 그 response값을 리턴

컨트롤러에는 비즈니스 로직이 적히면 안됨. request를 받고 검증처리를 하고 response를 보내는 구역
실제 비즈니스는 service에서 진행이 되어야함. => 왜일까?

1.31
로그인 API 이메일 비밀번호 필수로받고
token과 expirationTime jwtProvider에서 1시간으로 잡아서, 만료시가은 3600으로
signinfail만 만들고 (token안가져와도됨.), validation fail은 알아서 될거임.
UserEntity userEntity = UserRepository.findByEmail(); 
를 위해서 유저 리포지토리에 매소드 만들기
UserEntity findByEmail(String email);
근데 존재하는 1개 혹은 존재하지 않으면  0개 반환이니까 list로 받을 필요는 없다.

2.2 
로그인 회원가입 페이지는 공통이니까 하나로 만드는데, 
로그인 박스 회원가입 박스는 랜더링에 따라 다르니, 화면 상태 변수 지정
const [view, setView] = useState<'sign-in'|'sign-up'>('sign-in'); 리터럴 상태로

컨테이너 display: grid;
    grid-template-columns: 7fr 5fr;
    이거로 7:5비율로

2.5 
로그인 회원가입에 대한 박스 만들고 api를 위해서 apis에 signIn dto 만들고, apis index.ts에 
도메인이랑 url지정해줌. 넘기는 requestBody타입 dto로
inputBox들에 대해서도 공부 완.

2.6 
axios받고 async, await에 대해서 공부해야함.
post매소드 url에 requestbody를 보낸거에 대해서 response올때까지 await
responseBody라는 변수를 SignInResponseDto 타입으로 받아오고 리턴해줌.

에러시 (4, 500번대 코드) => catch로 에러 조율

=> 로그인버튼 클릭시 핸들러 함수 구현
requestBody를 SignInrequestDto형태로 이메일과 비번받아오고,
signInRequest에 body를 넘겨주고, 그 결과로 signInResponse를 한다.
그 기능을 위에 따로 구현

code꺼내와서 에러처리 다해주고, 성공일시, responseBody에서 token과 만료시간을 꺼내온다.

2.17
보드엔티티 리포지토리에 넣어줄 때, 빌더 패턴 사용하는 사람들 많지만 그러려면 dto다 분해해서 하나하나 넣어줘야하니,
dto와 email을 그냥 매개변수로 넘기고, boardEntity에 매소드를 만들어주자.
=> 이미지 entity랑 보드 entity도 해줌
보드쪽에 writeDatetime 시간 갖고오는거도 공부하고,
api구조를 잘 봐야함.
받아온 dto로 새로운 보드 엔티티를 만들고 db에 저장한다.
생성된 보드넘버를 갖고온다.
요청으로 받아온 이미지들의 리스트를 새로운 리스트로 받아온다. (url)
이미지 엔티티 형태의 새로운 배열 형태로 만들어준다.
for문 활용해서, 받아온 image 하나하나 조회하는 느낌으로
그리고 그 이미지에 대한 이미지 엔티티를 하나씩 만들어주고, 위에서 만들었던 배열에 하나씩 저장
그리고 그 이미지 배열들을 이미지db에 한꺼번에 저장시킨다.

그러고 컨트롤러


2.18
전에도 얘기했듯이, 헤더에 업로드 버튼이 있기에, 컴포넌트를 바디부분에 넣어놓음녀 업로드 버튼 클릭해도 백엔드로 못 넘어감
그래서, 제목 내용 이미지 파일 등등을 모두 전역으로 선언을 해줘야함.
=> stores에 boardstore ts => zustand로 만들었었지.

배열로 저장해놓고, 반복문으로 돌면서 보여지게끔 (image box부분)

2.20

제목이랑 내용에 대해서 textarea로 스크롤 없애고, scrollHeight줌

 const imageUrl = URL.createObjectURL(file);
    const newImageUrls = imageUrls.map(item => item);
    newImageUrls.push(imageUrl);
    setImageUrls(newImageUrls);
    얘는 미리보기용

    const newBoardImageFileList = boardImageFileList.map(item => item);
    newBoardImageFileList.push(file);
    setBoardImageFileList(newBoardImageFileList);
    얘는 백엔드로 업로드 하기용으로 돌리기

이미지 업로드와 이미지 삭제에 대해서 코드 구현하고
imageInputRef.current.value = ''; 이거는 이제 중복된 사진을 올릴시
ref가 같기때문에 다른 사진임을 인식하지 않아, 같은 사진은 올라가지지 않았다 그래서 올리고, ''빈값으로 바꿔줘야 다시가능

const file = event.target.files[0]; 왜 배열의 [0]인지 이해가안감 공부해야함.

2.23
파일 업로드 api연동하는데, 파일 업로드가 formData형태로 요청을 받고, 옵션에
const multipartFormData = {headers: {'Content-Type':'multipart/form-data'}};
이거를 추가해줌. 멀티파트폼데이타 (이미지 업로드)

게시글 업로드 (보드)는 requestBody랑 토큰(로그인된 유저에 대해서만)을 요청으로 받아와서 api연동
foreach는 동기처리가 안됨 그래서 async 걸어여함.

프론트 request에서 토큰 꺼내와서 토큰 없으면 리턴
게시글에 이미지 파일리스트가 있는데, 이는 파일 형태라,
string url이 필요 --=> 반복문 돌리는데, 새로운 폼데이터 형태의 data 만들어주고,
const url = await fileUploadRequest(data);
        if(url) boardImageList.push(url);

업로드 될때까지 기다리고, 그 url이 있으면 저기 배열에 푸쉬해준다.
resetBoard();
      if(!loginUser) return;
      const {email} = loginUser;
      navigate(USER_PATH(email));

작성이 되면 리셋보드로 게시글 작성한거 다 없애고, 네비게이트로 마이페이지로 가게끔해준다.

2.26
게시물 상세페이지에서
게시물 불러오기, 좋아요 리스트 불러오기, 좋아요 누르기, 댓글 작성하기, 댓글 리스트 불러오기
총 5개의 api가 필요하다.

게시물 불러오기는 getBoard로 요청은 없고 response만 dto를 만드러준다

보드 엔티티 만으로는 다 불러올 수 없다. 왜냐면 닉네임이나 그런거는 user 테이블에서 조인해서 사용한거라 
이럴때 네이티브 쿼리문을 사용해야한다.

@query 로 밸류를 활ㅇㅇ해서 DML 쿼리문 그대로 복붙 근데 이제 string형태다 보니 띄어쓰기 꼭 넣어주시
네이티브쿼리 true
보드넘버가 달라져야하니, ?1 하면 매개변수의 첫번째값을 여기에 넣겠다 라는 뜻으로 작용됨
반환형태가 boardEntity타입인데, 얘는 USer 테이블도 사용을하니 이를 해결하기 위해서 리포지토리에 다 받을 수 있는
인터페이스를 하나 생성해줄거임. getBoardResultSet이라고

서비스 임플에서, 보드넘버로 resultset을 갖고오고 없으면 보드존재x 오류 반환하고
있으면 이미지 리포지토리에서도 보드넘버로 찾는 매소드 만들어주고, 최종 resultSet과 imageEntity를 success에 넘겨준다 매개변수로
받으면, 하나하나 다 넣어주는 작업.(DTO 응답에서)
받아온 resultSet은 다 넣어주고 imageEntity는 따로 빼서 
List<String> boardImageList = new ArrayList<>();
        for(ImageEntity imageEntity: imageEntities) {
            String boardImage = imageEntity.getImage();
            boardImageList.add(boardImage);
        }

이거를 활용해서 하나하나 다 넣고, 그거를 응답에 넣어준다.

이거다 하면 조회하면 조회수가 올라가야하니, 보드 리포지토리에서 보드넘버로 findBy를 해서 보드엔티티를 찾고,
보드 엔티티에서 조회수 하나 올리는 매소드를 만들고, 그 increaseViewCount() 를 호출한 후 save 보드 엔티티를 해도된다
아니면  보드 리포지토리 쿼리문에서 viewCount 하나 올려주는 업데이트 쿼리를 써도됨

컨트롤러에서는 getMapping으로 pathVariable에 보드넘버가 들어간다.

2.27 
좋아요 누르기 API
1. 좋아요 누른 상태이면 좋아요 취소
2. 안 눌러져있는 상태에서 누르면 좋아요 눌러지기

jwt의 경우에느 디버거를 통해서 토큰을 만들어서 들어올 수도 있다. 그래서 이중으로 제약조건을 걸어놓음으로서 보안강화

2.28 
게시물 좋아요 리스트 불러오기
응답으로 favoriteListItem만 갖고오는거, 오류로는 존재하지 않는 보드넘버

3.1
댓글관련 api끝

3.2 
게시물 상세페이지 리액트 작업, 우선 상단 컴포넌트 구조 작성함. 내용부분(상단) 좋아요 댓글리스트 부분(하단)으로 나눠서 진행함.
하단 구조만 작성함. 
컴포넌트에서의 listItem을 맵함수로 하나하나 불러오는거함. 일단 다 하드코딩으로 만들어놓으.

3.5 
게시물 상세보기 페이지 이벤트 처리하는데, 로그인 상태, 보드넘버 변수 state 상태 만들어주고
board 인터페이스를 만들어줌. 백엔드에서 getBoardResponseDto에서의 변수 다 갖다와서 인터페이스 만들고,
닉네임 클릭시, 보드의 writerEmail로 유저페이지 드가게끔 네비게이트처리
=> 일단은 싹다 mock만들어줘서 useEffect로 boardNumber 바뀔시 setBoard를 board mock으로 변경.
업데이트 버튼 : 보드가 없거나 로그인이 되어있지않음녀 반환
로그인된유저의 이메일과 작성자 이메일과 다르면 반환 (본인만이 수정가능함)
=> 게시물 수정페이지로 네비게이트
게시물 삭제버튼 , 조건은 업데이트와 같다. 일단 메인path로 걸어놈 네비게이트

favoriteList.length 으로 갯수 표현
좋아요 버튼 클릭핸들러 해주는데, isFavorite이 true면 fill로 false면 light icon 보여주기

showFavorite이랑 showComment로 true면 다 보여주기 false면 안 보여주기

댓글 상태 체인지 핸들러, value를 textarea에 넣어주고, disable버튼을 comment 벨류에 빈string이 아니면 blackbutton으로 바뀌기
commentRef를 활용해서 scroll height만큼 댓글창 사이즈가 늘어가게끔 해줌.

댓글달기버튼에 대해서는 아직 완전 다 처리는 안하고, 댓글이 없을 경우에대해서 클릭 안되게 처리
비록 disable버튼이지만, 시각적효과만 dsiable이지 실제로 클릭은됨.


3.5 -2
게시물 상세보기 연동
response apis 만들어주고, main apis에 get board url만들고 코드짜줌.
이제 useEffect에 boardNumber에 따라 mock하는거 지워주고, boardNumber이상하면 걍 메인화면으로 리턴

리액트에서 useEffect돌때, 2번씩 돌게됨, 근데 이제 detail 안에 top이 또있으니 총 4번돌게 됨 => 조회수가 4씩 오름..
이게그래서 백엔드에서  getBoard api에서 조회수 증가시키는걸 없애고
대신 patchmapping으로 새로운 api를 만들어줌. increaseViewCount라고 요청은 없고 응답으로 NB와 SU만
보드넘버를 pathvariable로 받고, try catch는 boardEntity에 increaseViewCount하면 끝

프론트에서도 똑같이 apis에 increaseViewCount api를 만들어줌.
getMapping으로 해주고 뭐 리턴하는거없이 오류에 대해서만 건들여주고 끝

그리고 작성자이면 더보기 버튼 활성화
 if(!loginUser) {
      setWriter(false);
      return;
    }
    const isWriter = loginUser.email === board.writerEmail;
    setWriter(isWriter);

로그인도 안돼있으면 걍 false고 로그인이돼있으면 작성자이메일과 비교해서 맞으면 true아니면 또 false.

3.6
다른 api연동하기 전에, 로그인이 되어있는 상태가 아니라면, 댓글 달기 칸이 안 보이게함.
타임 포맷 맞추고, 똑같이 api 연동작업
response에서 내가 좋아요가 안눌러진 상태라면 isFavorite false로 해놓게 끔!
const isFavorite = favoriteList.findIndex(favorite => favorite.email === loginUser.email) !== -1;
존재하지 않으면 -1을 내보내줄거고, 그러면  isFavorite에 false가 저장이된다.

ㅇcommentList 그대로 하고, 근데 시간을 어떻게 하냐,
//             function: 작성일 경과 시간 함수           //
    const getElapsedTime = () => {
        const now = dayjs().add(9, 'hour');
        const writeTime = dayjs(writeDatetime);

        const gap = now.diff(writeTime, 's');
        if(gap < 60) return `${gap}초 전`;
        else if(gap < 3600) return `${Math.floor(gap / 60)}분 전`;
        else if(gap < 86400) return `${Math.floor(gap / 3600)}시간 전`;
        else return `${Math.floor(gap / 86400)}일 전`;
    }

    commponent에서 commentItem에서 시간 차이 함수 넣어줌.

    3.6 -2
    게시글 삭제 api구현
    NB NU NP 에러 작업.dto

    요청으로 받아온 email과 boardEntity에서 찾은 게시글의 작성자 이메일을 비겨해서 같지않으면 NP로 반환
    같다면 이제삭제해야함
    => Board DB를 참조하고 있는 모든 DB에 대해서 작업을 해줘야함.
    참조하고 있는 각 DB에 
    @Transactional
    void deleteByBoardNumber(Integer boardNumber);
    를 넣어준다. @Transactional을 꼭 붙여줘야함. => 이 친구의 기능에 대해서 알아보기

    다 지우고나서야 boardEntity를 지울 수 있다.
    => 55번 게시물 상세 페이지 좋아요 댓글 작성, 삭제 연동!

    3.7 
    게시물 좋아요, 삭제 api연동
    put은 requestBody에 dto가 들어와야해서 걍 빈거 {}로 넣어줌.
    putFavoriteResponse처리에서
    getFavoriteListRequest(boardNumber).then(getFavoriteListResponse); 이렇게 처리 (여기에 눌럿으면 뜨게끔 다 구현해놈)

    댓글 달기 
    요청으로 content받아오고, 보드넘버 토큰 requestBody 3개 받음
    getCommentListRequest(boardNumber).then(getCommentListResponse); 좋아요랑 똑같음.
    근데 이제 setCOmment로 댓글 작성이 되면, 다시 빈값으로 처리

    댓글 쭉쭉 나오는거 페이지네이션 ㄱㄱ

    삭제 api연동 삭제버튼에서 오류 다 처리하고, 바로 메인페이지 네비게이트

3.9
페이지네이션 작업 개념 (커스텀 훅 처리)
total_list = [a0, a1, a2, a3, a4, a5, a6, a7, a8, ..., a102]
103개의 게시물
한페이지에 3개의 객체를 보여줌  
1번 페이지 [a0, a1, a2]
2번 페이지 [a3, a4, a5]
3번 페이지 [a6, a7, a8]
...

1 - 0, 2
2 - 3, 5
3 - 6, 8
4 - 9, 11

start_index = 3 * (n - 1);
end_index = 3 * n - 1;



전체 길이 리스트 구하고
거기까지만 추출하도록

어쩔 때 프론트에서 하고 백에서 해야하는지?

--------------------------------------
프론트에서 처리
--------------------------------------

back에서 전체 객체 리스트를 받아옴
=> 프론트에서 슬라이싱을 하는방법

데이터 길이가 짧을 적에! 어느 시점부터 긴지는 모름.. => UX 테스팅 로딩 속도가 느려진다하면 백에서 처리하기 (TEST!!!)
기본적으로 프론트에서 처리를 하고, 점점 테스팅으로 백으로 전환
=> 커스텀 훅!

--------------------------------------
백에서 처리
--------------------------------------

client로부터 현재 페이지 번호를 받아온다.
해당 페이지에서 보여줄 객체 리스트만으로 응답 + 전체 게시물 객체 갯수도 같이 반환
=> 왜 전체를 알아야하냐면, 그래야 마지막 섹션에 몇번째 인덱스까지 추출이 되는지 알 수 있다.

전체 리스트의 길이가 굉장히 길때 => 백에서 처리하는게 좋다 어느정도 길이일까..?
그래야 이제, 프론트에서 다 보내고, 처리하면 다 보내는 데 시간이너무 오래걸림
로딩속도를 줄일 수 있다

단점: 한 페이지에서 이동시킬 때마다, request를 계속 보내야한다. => 백은 하나하나 작업이 늘어나기때문에 부하가 심해짐
한페이지 로딩이 발생할 수도 있음

=> 페이지 네이션 개념 훅함수 적용해보자!
커스텀 훅 사용하는 이유: 
메인페이지, 검색페이지, 유저페이지, 상세보이기 페이지 등 많이 쓰이기에 일반 함수가 아니라 훅함수로 만들어야하냐?
일반함수에서는 useState useEffect는 사용가능한 위치가 컴포넌트 위치에서만 사용이 가능함 or 커스텀 훅에서만 쓸 수가있다.
일반함수에서는 얘네를 사용할 수 없어서 커스텀 훅 사용예정

usePagination 간단하게 앞에 use붙이면 훅함수 됨


